---
description: Enforce Git workflow standards, conventional commits, and repository organization
---

# Git Standards

This document outlines the standards and best practices for using Git in this project. Adhering to these standards ensures a clean, understandable, and maintainable version history.

## Core Workflow

1.  **Branching:** All new work, including features and bugfixes, MUST be done on a feature branch created from the latest version of the `main` branch.
    -   Before creating a new branch, always run `git checkout main` followed by `git pull origin main` to ensure you are starting from the most up-to-date point.
2.  **Merging:** Feature branches MUST be merged into `main` exclusively through Pull Requests (PRs) on the remote Git provider (e.g., GitHub, GitLab).
    -   **NEVER** merge a local feature branch directly into your local `main` branch (`git merge my-feature`).
    -   **NEVER** push directly to the `main` branch. This should be enforced with branch protection rules on the remote.
3.  **Staying Updated:** To incorporate new changes from `main` into your active feature branch, use `git rebase main`. This maintains a clean, linear history. Avoid using `git merge main` for this purpose.

## Pull Request Description Standards

### Core Requirements for PR Descriptions

**ALWAYS generate concise, focused PR descriptions that highlight completed work.** PR descriptions must be:

1. **Concise** - Focus on what was actually completed, not verbose explanations
2. **Actionable** - Clearly state what reviewers need to know
3. **Structured** - Follow the standard format below
4. **Markdown Output** - Always provide the description in markdown format for direct copying, NEVER create files

### Required PR Description Format

```markdown
## **[emoji] [type]: [brief description] ([iteration/context])**

**What's Complete:**
- Key deliverable 1
- Key deliverable 2  
- Key deliverable 3
- Test coverage details
- Deployment validation status

**Technical Details:**
```
file/structure/overview
├── ComponentA.tsx    # Brief description
├── ComponentB.tsx    # Brief description
└── __tests__/        # Test coverage
```

**Progress Tracking:** X/Y criteria complete (Z%)
- ✅ Completed item 1
- ✅ Completed item 2
- 🔄 In-progress item (next step)

**Quality Gates:**
- ✅ All tests pass (specify types)
- ✅ Build/deployment status
- ✅ Code quality compliance
- ✅ Breaking changes status

**Next:** Brief description of immediate next steps
```

### PR Description Examples

**Feature Implementation:**
```markdown
## **🏆 feat: implement club selector UI components (Iteration 5/6)**

**What's Complete:**
- ClubSelector dropdown component with club switching
- ClubIndicator for current club display  
- Header integration in navigation bar
- 17 unit tests (100% component coverage)
- E2E validation with Docker deployment

**Technical Details:**
```
src/components/club/
├── ClubSelector.tsx     # Interactive dropdown
├── ClubIndicator.tsx    # Status display
├── index.ts            # Exports
└── __tests__/          # Comprehensive tests
```

**User Story Progress:** 4/5 acceptance criteria complete (80%)
- ✅ Club context establishment
- ✅ Multi-club selection UI
- ✅ Club switching functionality  
- ✅ Session persistence
- 🔄 Data isolation (next iteration)

**Quality Gates:**
- ✅ All tests pass (unit + E2E + build)
- ✅ Docker deployment validated
- ✅ TypeScript/ESLint/Prettier compliant
- ✅ No breaking changes

**Next:** Iteration 6 - Data isolation middleware
```

**Bug Fix:**
```markdown
## **🐛 fix: resolve authentication token expiry handling**

**What's Complete:**
- Fixed token refresh logic in auth middleware
- Added proper error handling for expired tokens
- Updated 8 existing unit tests
- Verified fix across all auth flows

**Technical Details:**
```
src/lib/auth/
├── middleware.ts        # Token validation fix
├── refresh-handler.ts   # New refresh logic
└── __tests__/          # Updated test coverage
```

**Quality Gates:**
- ✅ All auth tests pass
- ✅ E2E authentication flows verified
- ✅ No breaking changes
- ✅ Security review completed

**Next:** Monitor production metrics for 24h
```

### What NOT to Include in PR Descriptions

❌ **Avoid These Verbose Elements:**
- Long explanations of implementation details
- Extensive background context
- Multiple screenshots unless UI-critical
- Detailed code walkthroughs
- Future planning beyond immediate next steps
- Extensive testing methodology explanations

✅ **Focus On:**
- Completed deliverables
- Quality validation
- Progress tracking
- Immediate impact
- Next actionable steps

## Conventional Commits Standard

### Commit Message Format
```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Required Commit Types
- **feat**: A new feature for the user
- **fix**: A bug fix for the user
- **docs**: Documentation only changes
- **style**: Changes that don't affect meaning (white-space, formatting, etc.)
- **refactor**: Code change that neither fixes a bug nor adds a feature
- **perf**: Code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **chore**: Changes to build process or auxiliary tools
- **ci**: Changes to CI configuration files and scripts
- **build**: Changes that affect the build system or external dependencies

### Commit Message Examples for NextJS Projects
```bash
# ✅ Good Examples
feat(auth): add NextAuth.js OAuth integration with Google provider
fix(api): resolve NextJS API route timeout issue
docs(readme): update NextJS development setup instructions
style(components): format code with Prettier and ESLint
refactor(api): extract API client logic to separate service
perf(pages): optimize page loading with dynamic imports
test(auth): add unit tests for authentication components
chore(deps): update Next.js to version 14.0.0
ci(github): add automated testing workflow for NextJS
build(docker): update Node.js base image to 20-alpine

# ✅ NextJS-Specific Examples
feat(ui): add reusable Button component with Tailwind variants
fix(routing): resolve App Router middleware redirect issue
perf(images): implement Next.js Image optimization
style(layout): apply consistent spacing with Tailwind utilities
refactor(components): convert class components to React hooks
test(pages): add integration tests for dashboard routes

# ✅ Breaking Changes
feat(api)!: migrate from Pages Router to App Router
BREAKING CHANGE: API routes moved from /pages/api to /src/app/api

# ❌ Bad Examples
"Fixed stuff"                    # Too vague
"Updated files"                  # No context
"WIP"                           # Not descriptive
"asdf"                          # Meaningless
"Fixed the thing that was in a broken state" # Too casual
```

## Branch Naming Conventions

### Branch Types and Patterns
```bash
# Feature branches
feature/user-authentication
feature/payment-integration
feature/dashboard-ui

# Bug fix branches
fix/login-redirect-issue
fix/memory-leak-in-parser
hotfix/critical-security-patch

# Release branches
release/v1.2.0
release/v2.0.0-beta

# Development branches
develop
main (or master)

# Personal/experimental branches
chore/update-dependencies
docs/api-documentation
refactor/database-layer
```

### Branch Naming Rules
- Use lowercase with hyphens (kebab-case)
- Include ticket number when applicable: `feature/AUTH-123-user-login`
- Keep names concise but descriptive
- Use prefixes: `feature/`, `fix/`, `hotfix/`, `release/`, `chore/`

## Repository Structure Requirements

### Required Files in NextJS Repository Root
```
project-root/
├── .cursor/                   # Cursor AI rules and configuration
├── .github/                   # GitHub-specific files
│   └── workflows/            # GitHub Actions
├── public/                    # Static assets served directly
├── src/                       # Application source code
│   └── app/                   # NextJS App Router directory
├── .env.example              # Environment template
├── .env.local                # Local environment variables
├── .eslintrc.json            # ESLint configuration
├── .gitignore                # Comprehensive ignore patterns
├── CHANGELOG.md              # Version history
├── LICENSE                   # Project license
├── next.config.ts            # NextJS configuration
├── package.json              # Dependencies and scripts
├── README.md                 # Project documentation
├── postcss.config.mjs        # PostCSS configuration (Tailwind v4)
└── tsconfig.json             # TypeScript configuration
```

**Cross-Reference**: See `nextjs-structure-standards.mdc` for detailed App Router structure requirements.

### .gitignore Template for NextJS Projects
```gitignore
# NextJS
.next/
out/
build/
*.tsbuildinfo

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# TypeScript
*.tsbuildinfo

# Testing
coverage/
.nyc_output/
.coverage
*.lcov

# Logs
logs/
*.log

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Docker
*.pid
*.seed
*.pid.lock

# Database
*.db
*.sqlite
*.sqlite3

# Temporary files
.tmp/
.temp/
*.tmp
*.temp

# Vercel
.vercel

# Turbo
.turbo

# Secrets
*.pem
*.key
*.crt
secrets/
.secrets/

# Build outputs
/build
/dist
/.next
/out

# Testing
/coverage
/.nyc_output

# Secrets
*.pem
*.key
*.crt
secrets/
.secrets/

# Temporary files
.tmp/
.temp/
*.tmp
*.temp
```

## Git Workflow Standards

### Repository Initialization: The First Push
**To avoid bootstrap paradoxes, the `main` branch MUST be created on the remote repository with a single, minimal commit *before* any feature development begins.** This allows the very first feature to be managed through a proper pull request.

**Procedure for a New Repository:**

1.  **Initialize the local repository.**
    ```powershell
    git init
    git config --local init.defaultBranch main
    ```

2.  **Create essential root files.**
    At a minimum, create a `README.md` and a comprehensive `.gitignore`.
    ```powershell
    New-Item README.md
    New-Item .gitignore
    # (Then, populate .gitignore from the template below)
    ```

3.  **Make the initial commit.**
    ```powershell
    git add README.md .gitignore
    git commit -m "chore(project): initial commit"
    ```

4.  **Add the remote and push `main`.**
    This establishes the `main` branch on the remote server.
    ```powershell
    git remote add origin <your-remote-repository-url>
    git push -u origin main
    ```

5.  **Immediately create your first feature branch.**
    All subsequent work MUST be done on a feature branch.
    ```powershell
    git checkout -b feature/PROJECT-1-initial-project-setup
    ```

### Feature Development Workflow
```powershell
# Start new feature
git checkout main; git pull origin main
git checkout -b feature/user-authentication

# Make changes and commit
git add .
git commit -m "feat(auth): add JWT token validation"

# Push feature branch
git push -u origin feature/user-authentication

# Create pull request via GitHub CLI or web interface
gh pr create --title "feat(auth): add user authentication" --body "$(cat pr-description.md)"

# After review and approval
git checkout main; git pull origin main
git branch -d feature/user-authentication
```

### Hotfix Workflow
```powershell
# Create hotfix from main
git checkout main; git pull origin main
git checkout -b hotfix/critical-security-patch

# Fix and commit
git add .
git commit -m "fix(security): patch SQL injection vulnerability"

# Push and create urgent PR
git push -u origin hotfix/critical-security-patch
gh pr create --title "URGENT: Security patch" --body "Fixes critical SQL injection vulnerability"
```

## Git Configuration

### Required Git Configuration
```powershell
# Set user information
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

# Set default branch name
git config --global init.defaultBranch main

# Enable automatic line ending conversion
git config --global core.autocrlf true  # Windows
git config --global core.autocrlf input # macOS/Linux

# Set default editor
git config --global core.editor "code --wait"

# Enable color output
git config --global color.ui auto

# Set pull strategy
git config --global pull.rebase true

# Set push strategy
git config --global push.default simple
```

## Common Git Commands (PowerShell Compatible)

### Daily Workflow Commands
```powershell
# Check status and staged changes
git status
git diff --staged

# Add files selectively
git add -p  # Interactive staging
git add backend/  # Add directory

# Commit with conventional format
git commit -m "feat(api): add user endpoint"

# Push current branch
git push

# Update local main branch
git checkout main; git pull origin main

# Clean up merged branches
git branch --merged | Where-Object { $_ -notmatch "main|develop" } | ForEach-Object { git branch -d $_.Trim() }
```

### Pull Request Content Generation

**CRITICAL: Always generate PR descriptions in markdown format for direct copying - NEVER create files.**

**Procedure after pushing a feature branch:**
1. Identify the type of change (feature, fix, etc.)
2. Generate concise PR description using the required format
3. Focus on completed work and quality validation
4. Present markdown content directly to user for copying
5. Ensure all quality gates are documented

**Example of proper PR description output:**
```markdown
## **🏆 feat: implement user authentication system**

**What's Complete:**
- JWT token validation and refresh logic
- Login/logout API endpoints
- Protected route middleware
- 12 unit tests (100% auth coverage)

**Quality Gates:**
- ✅ All tests pass
- ✅ Security review completed
- ✅ No breaking changes

**Next:** Implement role-based permissions
```

## Engineering Practices Integration

This Git standards rule integrates with the complete engineering practices ecosystem:

#### Code Quality and Pre-commit Hooks
- **`bp-code-quality-standards.mdc`**: Implements Husky pre-commit hooks, ESLint, Prettier
- **Integration**: Git hooks enforce quality gates before commits are allowed

#### Project Structure and Organization  
- **`nextjs-structure-standards.mdc`**: Defines NextJS App Router project structure
- **Integration**: Repository structure requirements align with NextJS conventions

#### Security and Environment Management
- **`bp-security-standards.mdc`**: Handles .env file security, secrets management
- **Integration**: .gitignore templates exclude sensitive files, commit validation prevents secrets

### Success Criteria

**Git Workflow Implementation Complete When:**
- [x] **Repository structure** matches NextJS standards
- [x] **Conventional commits** enforced and followed
- [x] **Pre-commit hooks** prevent poor code quality
- [x] **Branch naming** follows established conventions
- [x] **PR descriptions** are concise and focused on completed work
- [x] **Integration** with all engineering practices verified

**Remember: Consistent Git practices are essential for team collaboration. Always use conventional commits, maintain clean history, and generate focused PR descriptions that highlight completed work.**
    git branch -d name-of-old-feature-branch
    ```

## Conventional Commits
# ... existing code ...