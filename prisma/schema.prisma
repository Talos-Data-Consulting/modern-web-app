// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // CRITICAL: Multiple binary targets prevent Docker deployment crashes
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication relationships
  accounts Account[]
  sessions Session[]
  
  // Club relationships
  userClubs UserClub[]

  @@map("users")
}

// Account model for OAuth and other authentication providers
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String   @db.VarChar(50)
  provider          String   @db.VarChar(50)
  providerAccountId String   @db.VarChar(255)
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?  @db.VarChar(50)
  scope             String?  @db.Text
  id_token          String?  @db.Text
  session_state     String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

// Session model for session management
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(255)
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expires])
  @@map("sessions")
}

// Verification token model for email verification
model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
  @@index([token])
  @@index([expires])
  @@map("verification_tokens")
}

// Club model for multi-club context management
model Club {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Club relationships
  userClubs   UserClub[]

  @@index([name])
  @@index([isActive])
  @@index([isActive, createdAt])
  @@map("clubs")
}

// UserClub junction model for many-to-many user-club relationships
model UserClub {
  id        String   @id @default(cuid())
  userId    String
  clubId    String
  role      ClubRole @default(MEMBER)
  isActive  Boolean  @default(true)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)

  // Ensure a user can only have one relationship per club
  @@unique([userId, clubId])
  @@index([userId])
  @@index([clubId])
  @@index([userId, isActive])
  @@index([clubId, isActive])
  @@map("user_clubs")
}

// Enum for club roles
enum ClubRole {
  MEMBER
  ADMIN
  OWNER
}
